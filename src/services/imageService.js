const { createCanvas } = require('canvas');
const fs = require('fs').promises;
const path = require('path');
const { IMAGE } = require('../config/constants');
const countryModel = require('../models/countryModel');

/**
 * Format number with commas
 */
function formatNumberOld(num) {
    if (num === null || num === undefined) return 'N/A';
    return num.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ',');
}

/**
 * Format number with commas
 */
function formatNumber(num) {
    if (num === null || num === undefined || isNaN(num)) return 'N/A';
    // Convert to number if it's a string
    const number = typeof num === 'string' ? parseFloat(num) : num;
    if (isNaN(number)) return 'N/A';
    return number.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ',');
}

/**
 * Generate summary image
 */
async function generateSummaryImage() {
    // Get data
    const totalCountries = await countryModel.getCountriesCount();
    const topCountries = await countryModel.getTopCountriesByGDP(5);
    const lastRefreshed = await countryModel.getLastRefreshTimestamp();

    // Create canvas
    const canvas = createCanvas(IMAGE.WIDTH, IMAGE.HEIGHT);
    const ctx = canvas.getContext('2d');

    // Background
    ctx.fillStyle = IMAGE.BACKGROUND_COLOR;
    ctx.fillRect(0, 0, IMAGE.WIDTH, IMAGE.HEIGHT);

    // Title
    ctx.fillStyle = IMAGE.TEXT_COLOR;
    ctx.font = 'bold 32px Arial';
    ctx.fillText('Country Currency Summary', 50, 60);

    // Total countries
    ctx.font = '20px Arial';
    ctx.fillText(`Total Countries: ${totalCountries}`, 50, 110);

    // Last refreshed
    ctx.font = '16px Arial';
    ctx.fillStyle = '#cccccc';
    ctx.fillText(`Last Refreshed: ${lastRefreshed || 'Never'}`, 50, 140);

    // Top 5 countries header
    ctx.fillStyle = IMAGE.TEXT_COLOR;
    ctx.font = 'bold 24px Arial';
    ctx.fillText('Top 5 Countries by Estimated GDP', 50, 200);

    // Draw top countries
    ctx.font = '18px Arial';
    let yPosition = 240;

    topCountries.forEach((country, index) => {
        const rank = index + 1;
        // Safely handle GDP value
        const gdp = country.estimated_gdp !== null && country.estimated_gdp !== undefined
            ? parseFloat(country.estimated_gdp)
            : null;
        const gdpFormatted = formatNumber(gdp);

        // Rank number
        ctx.fillStyle = IMAGE.ACCENT_COLOR;
        ctx.fillRect(50, yPosition - 20, 40, 30);
        ctx.fillStyle = IMAGE.TEXT_COLOR;
        ctx.fillText(`${rank}`, 60, yPosition);

        // Country name
        ctx.fillText(country.name, 110, yPosition);

        // GDP value
        ctx.fillStyle = '#00ff88';
        ctx.fillText(`$${gdpFormatted}`, 400, yPosition);

        yPosition += 50;
    });

    // Footer
    ctx.fillStyle = '#888888';
    ctx.font = '14px Arial';
    ctx.fillText('Generated by Country Currency API', 50, IMAGE.HEIGHT - 30);

    // Ensure cache directory exists
    const cacheDir = path.resolve(IMAGE.CACHE_DIR);
    try {
        await fs.mkdir(cacheDir, { recursive: true });
    } catch (err) {
        // Directory might already exist
    }

    // Save image
    const imagePath = path.join(cacheDir, IMAGE.FILENAME);
    const buffer = canvas.toBuffer('image/png');
    await fs.writeFile(imagePath, buffer);

    return imagePath;
}

/**
 * Generate summary image
 */
async function generateSummaryImageOld() {
    // Get data
    const totalCountries = await countryModel.getCountriesCount();
    const topCountries = await countryModel.getTopCountriesByGDP(5);
    const lastRefreshed = await countryModel.getLastRefreshTimestamp();

    // Create canvas
    const canvas = createCanvas(IMAGE.WIDTH, IMAGE.HEIGHT);
    const ctx = canvas.getContext('2d');

    // Background
    ctx.fillStyle = IMAGE.BACKGROUND_COLOR;
    ctx.fillRect(0, 0, IMAGE.WIDTH, IMAGE.HEIGHT);

    // Title
    ctx.fillStyle = IMAGE.TEXT_COLOR;
    ctx.font = 'bold 32px Arial';
    ctx.fillText('Country Currency Summary', 50, 60);

    // Total countries
    ctx.font = '20px Arial';
    ctx.fillText(`Total Countries: ${totalCountries}`, 50, 110);

    // Last refreshed
    ctx.font = '16px Arial';
    ctx.fillStyle = '#cccccc';
    ctx.fillText(`Last Refreshed: ${lastRefreshed || 'Never'}`, 50, 140);

    // Top 5 countries header
    ctx.fillStyle = IMAGE.TEXT_COLOR;
    ctx.font = 'bold 24px Arial';
    ctx.fillText('Top 5 Countries by Estimated GDP', 50, 200);

    // Draw top countries
    ctx.font = '18px Arial';
    let yPosition = 240;

    topCountries.forEach((country, index) => {
        const rank = index + 1;
        const gdpFormatted = formatNumber(country.estimated_gdp);

        // Rank number
        ctx.fillStyle = IMAGE.ACCENT_COLOR;
        ctx.fillRect(50, yPosition - 20, 40, 30);
        ctx.fillStyle = IMAGE.TEXT_COLOR;
        ctx.fillText(`${rank}`, 60, yPosition);

        // Country name
        ctx.fillText(country.name, 110, yPosition);

        // GDP value
        ctx.fillStyle = '#00ff88';
        ctx.fillText(`$${gdpFormatted}`, 400, yPosition);

        yPosition += 50;
    });

    // Footer
    ctx.fillStyle = '#888888';
    ctx.font = '14px Arial';
    ctx.fillText('Generated by Country Currency API', 50, IMAGE.HEIGHT - 30);

    // Ensure cache directory exists
    const cacheDir = path.resolve(IMAGE.CACHE_DIR);
    try {
        await fs.mkdir(cacheDir, { recursive: true });
    } catch (err) {
        // Directory might already exist
    }

    // Save image
    const imagePath = path.join(cacheDir, IMAGE.FILENAME);
    const buffer = canvas.toBuffer('image/png');
    await fs.writeFile(imagePath, buffer);

    return imagePath;
}

/**
 * Get summary image path
 */
function getSummaryImagePath() {
    return path.join(path.resolve(IMAGE.CACHE_DIR), IMAGE.FILENAME);
}

/**
 * Check if summary image exists
 */
async function summaryImageExists() {
    try {
        await fs.access(getSummaryImagePath());
        return true;
    } catch {
        return false;
    }
}

module.exports = {
    generateSummaryImage,
    getSummaryImagePath,
    summaryImageExists
};